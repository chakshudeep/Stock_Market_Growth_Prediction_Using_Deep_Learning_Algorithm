# -*- coding: utf-8 -*-
"""StockMarketGrowthPrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cCrKFxA8i-D3uKlcE7vf2Nx_sxKgxguc
"""

import pandas_datareader as pdr
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM
import tensorflow as tf
import math

df=pdr.get_data_tiingo('AAPL',api_key='9ddeed86010071097a5d2d76b6118a109fed45ee')

df.to_csv('AAPL.csv')
df=pd.read_csv('AAPL.csv')
df.head()

df.tail()

df1=df.reset_index()['close']
df1.shape
df1

plt.plot(df1)

#transforming the data
scaler=MinMaxScaler(feature_range=(0,1))
df1=scaler.fit_transform(np.array(df1).reshape(-1,1))
df1.shape

df1

#splitting datset into train and test data
training_size=int(len(df1)*0.65)
testing_size=len(df1)-training_size
train_data,test_data=df1[0:training_size,:],df1[training_size:len(df1),:1]

len(train_data),len(test_data)

#converting array of values into a dataset matrix
import numpy
def create_dataset(dataset,time_step=1):
   dataX, dataY=[], []
   for i in range(len(dataset)-time_step-1):
     a=dataset[i:(i+time_step),0]
     dataX.append(a)
     dataY.append(dataset[i+time_step,0])
   return numpy.array(dataX),numpy.array(dataY)

#reshaping the data as X=t,t+1,t+2 and Y=t+4
time_step=100
X_train, Y_train= create_dataset(train_data, time_step)
X_test, Y_test= create_dataset(test_data, time_step)

print(X_train.shape) ,print(Y_train.shape)

print(X_test.shape), print(Y_test.shape)

#reshaping data for LSTM in 3D [samples,time_steps,features]
X_train=X_train.reshape(X_train.shape[0],X_train.shape[1],1)
X_test=X_test.reshape(X_test.shape[0],X_test.shape[1],1)

#creating our Staxked LSTM model
model=Sequential()
model.add(LSTM(50,return_sequences=True,input_shape=(100,1)))
model.add(LSTM(50,return_sequences=True))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(loss='mean_squared_error',optimizer='adam')

model.summary()

model.fit(X_train,Y_train,validation_data=(X_test,Y_test),epochs=100,batch_size=64,verbose=1)

#prediction
train_predict=model.predict(X_train)
test_predict=model.predict(X_test)

#transform back to original form----inverse tranformation
train_predict=scaler.inverse_transform(train_predict)
test_predict=scaler.inverse_transform(test_predict)

#RMSE performance metrics
#train data RMSE
math.sqrt(mean_squared_error(Y_train,train_predict))

#test data RMSE
math.sqrt(mean_squared_error(Y_test,test_predict))

#plotting the growth

#shifting train for plotting
import numpy
lookback=100
trainPredictPlot=numpy.empty_like(df1)
trainPredictPlot[:,:]=np.nan
trainPredictPlot[lookback:len(train_predict)+lookback,:]=train_predict

#shfting test for plotting
testPredictPlot=numpy.empty_like(df1)
testPredictPlot[:,:]=numpy.nan
testPredictPlot[len(train_predict)+(lookback*2)+1:len(df1)-1,:]=test_predict

plt.plot(scaler.inverse_transform(df1),label='Stock Data')
plt.plot(trainPredictPlot,label='Train predict data')
plt.plot(testPredictPlot,label='Test predict data')
plt.legend()
plt.show()

len(test_data)

x_input=test_data[341:].reshape(1,-1)
x_input.shape

temp_input=list(x_input)
temp_input=temp_input[0].tolist()
temp_input

from numpy import array

lst_output=[]
n_steps=100
i=0
while(i<30):
    
    if(len(temp_input)>100):
        x_input=np.array(temp_input[1:])
        print("{} day input {}".format(i,x_input))
        x_input=x_input.reshape(1,-1)
        x_input = x_input.reshape((1, n_steps, 1))
        yhat = model.predict(x_input, verbose=0)
        print("{} day output {}".format(i,yhat))
        temp_input.extend(yhat[0].tolist())
        temp_input=temp_input[1:]
        lst_output.extend(yhat.tolist())
        i=i+1
    else:
        x_input = x_input.reshape((1, n_steps,1))
        yhat = model.predict(x_input, verbose=0)
        print(yhat[0])
        temp_input.extend(yhat[0].tolist())
        print(len(temp_input))
        lst_output.extend(yhat.tolist())
        i=i+1
    

print(lst_output)

day_new=np.arange(1,101)
day_pred=np.arange(101,131)

len(df1)

plt.plot(day_new,scaler.inverse_transform(df1[1159:]),label='Real data')
plt.plot(day_pred,scaler.inverse_transform(lst_output),label='30 days predicted data')
plt.xlabel('Days')
plt.ylabel('Prices')
plt.legend()
plt.show()

df3=df1.tolist()
df3.extend(lst_output)
plt.plot(df3[1200:])

df3=scaler.inverse_transform(df3).tolist()
plt.plot(df3)
plt.xlabel("DAYS")
plt.ylabel("Stock Prices")
plt.show()
